<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzle.NAspect.Framework.NET3.5</name>
    </assembly>
    <members>
        <member name="T:Puzzle.NAspect.Framework.Aop.InterceptorAttribute">
            <summary>
            Attribute that can be applied to interceptor methods in a typed aspect.
            Interceptor methods must match delegate signatures of either <c>AroundDelegate</c>, <c>BeforeDelegate</c> or <c>AfterDelegate</c> 
            </summary>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.InterceptorAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterceptorAttribute.#ctor">
            <summary>
            InterceptorAttribute ctor.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.InterceptorAttribute.Index">
            <summary>
            Call chain index of the interceptor, mark your first interceptor with index=1 , then next with index=2 etc.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.InterceptorAttribute.TargetAttribute">
            <summary>
            When a type is matched, every method decorated with an attribute of this type with get the current interceptor applied.        
            </summary>
            <example>
            <para>Sample of method that should get the interceptor applied:</para>
            <code lang="CS">
            [AttributeThatIWantToPointcutOn]
            public virtual void Foo()
            {
            }
            </code>
            
            <para>Sample interceptor in your typed aspect:</para>
            <code lang="CS">
            [Interceptor(Index=1,TargetAttribute=typeof(AttributeThatIWantToPointcutOn))]
            private object MyAroundInterceptor(MethodInvocation call)
            {
                return call.Proceed();
            }
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.InterceptorAttribute.TargetSignature">
            <summary>
            When a type is matched, every method with this signature will be matched.
            Valid wildcards are:
            ? for ignoring single characters
            * for ignoring one or more characters
            </summary>
            <example>
            <para>Sample of method that should get the interceptor applied:</para>
            <code lang="CS">      
            public virtual void Foo()
            {
            }
            </code>
            
            <para>Sample interceptor in your typed aspect:</para>
            <code lang="CS">
            [Interceptor(Index=1,TargetSignature="*void Foo()"))]
            private object MyAroundInterceptor(MethodInvocation call)
            {
                return call.Proceed();
            }
            </code>
            </example>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.MixinAttribute">
            <summary>
            Attribute that can be applied to typed aspects.
            </summary>
            <example>
            <para>Example of typed aspect:</para>
            <code lang="CS">
            [AspectTarget(TargetType=typeof(SomeClassThatGetsThisAspectApplied)]
            [Mixin(typeof(MyMixin))]
            [Mixin(typeof(MyOther))]
            public class MyAspect : ITypedAspect //marker interface only
            {
                ...
            }
            </code>
            </example>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.InterceptorAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.MixinAttribute.#ctor(System.Type)">
            <summary>
            Mixin attribute Ctor.
            </summary>
            <param name="mixinType">A type that should be mixed into every target of this aspect</param>
            <example>
            <para>Example of typed aspect:</para>
            <code lang="CS">
            [AspectTarget(TargetType=typeof(SomeClassThatGetsThisAspectApplied)]
            [Mixin(typeof(MyMixin))] //mixes in MyMixin on all targets
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.MixinAttribute.MixinType">
            <summary>
            Type of the mixin to be applied to this aspect.
            </summary>
            <example>
            <para>Example of typed aspect:</para>
            <code lang="CS">
            [AspectTarget(TargetType=typeof(SomeClassThatGetsThisAspectApplied)]
            [Mixin(typeof(MyMixin))] //mixes in MyMixin on all targets
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute">
            <summary>
            Attribute that can be applied to typed aspects.
            Determines what types should get this aspect applied.
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetType=typeof(SomeClass)] //SomeClass will get the MyAspect applied to it
            [Mixin(typeof(MyMixin))] 
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.InterceptorAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute.TargetAttribute">
            <summary>
            Every type decorated with an attribute of this type will get the current aspect applied.
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetAttribute=typeof(SomeAttribute)] //every type decorated with SomeAttribute will get this aspect applied to it
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute.TargetInterface">
            <summary>
            Every type implementing the interface of this type will get the current aspect applied.
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetInterface=typeof(SomeInterface)] //every type implementing the SomeInterface interface will get this aspect applied to it
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute.TargetSignature">
            <summary>
            Every type with a signature that matches this pattern will get the current aspect applied.
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetSignature="*SomeClass*")] //every type whose name matches *SomeClass* will get the current aspect applied
            public class MyAspect : ITypedAspect ...
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute.TargetType">
            <summary>
            Assigns a single type that should get this aspect applied to it.
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetType=typeof(SomeClass)] //SomeClass will get the MyAspect applied to it
            [Mixin(typeof(MyMixin))] 
            public class MyAspect : ITypedAspect ...
            </code>
            </example> 
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.GenericAspect">
            <summary>
            The standard aspect representation
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.GenericAspectBase">
            <summary>
            Base class for aspects.
            Contains lists of mixins and pointcuts for the aspect.
            You generally do not need to use this class by your self.
            Use the AttributeAspect , SignatureAspect or Typed aspects.
            </summary>
            <example>
            <para>When inheriting this class you must override the <c>IsMatch</c> method.</para>
            <code lang="CS">
            //aspect that matches all types whose name start with MyClass
            public override bool IsMatch(Type type)
            {
                if (type.Name.StartsWith("MyClass"))
                    return true;
                else
                    return false;
            }
            </code>
            </example>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.IGenericAspect">
            <summary>
            Interface for generic aspects.
            Current generic aspects are <c>SignatureAspect</c> and <c>AttributeAspect</c>
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.IAspect">
            <summary>
            Marker interface for all aspects.
            If you need to create your own aspect types you have to create your own <c>AspectMatcher</c> and assign to your <c>AopEngine</c>
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.IGenericAspect.IsMatch(System.Type)">
            <summary>
            Implement this method in a class to match specific types.
            </summary>
            <param name="type">Target that might get this aspect applied to it</param>
            <returns>return true if the given type should get this aspect applied, otherwise false</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.IGenericAspect.Name">
            <summary>
            Just a name of the aspect, has no real purpose today.
            Features to fetch named aspects might be added later.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.IGenericAspect.Mixins">
            <summary>
            List of mixin types.
            Since this is .NET 1.x compatible and we are lazy farts, you get this in an untyped manner.
            The element type of this list should be <c>System.Type</c>
            </summary>
            <example>
            <code lang="CS">
            myAspect.Mixins.Add(typeof(MyMixin));
            myAspect.Mixins.Add(typeof(ISomeMarkerInterfaceWOImplementation));
            </code>
            </example>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.IGenericAspect.Pointcuts">
            <summary>
            List of pointcuts.
            Since this is .NET 1.x compatible and we are lazy farts, you get this in an untyped manner.
            The element type of this list should be <c>IPointcut</c>.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.IGenericAspect.Targets">
            <summary>
            List of targets
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.GenericAspectBase.IsMatch(System.Type)">
            <summary>
            Implementation of AspectBase.IsMatch
            <seealso cref="M:Puzzle.NAspect.Framework.Aop.IGenericAspect.IsMatch(System.Type)"/>
            </summary>
            <param name="type">Type to match</param>
            <returns>true if the aspect should be applied to the type, otherwise false.</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.GenericAspectBase.Name">
            <summary>
            Just a name of the aspect, has no real purpose today.
            Features to fetch named aspects might be added later.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.GenericAspectBase.Mixins">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.GenericAspectBase.TypeExtenders">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.GenericAspectBase.Pointcuts">
            <summary>
            List of pointcuts.
            Since this is .NET 1.x compatible and we are lazy farts, you get this in an untyped manner.
            The element type of this list should be <c>IPointcut</c>.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.GenericAspectBase.Targets">
            <summary>
            List of targets
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.GenericAspect.#ctor(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="name">Name of the aspect.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.GenericAspect.#ctor(System.String,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="name">Name of the aspect.</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.GenericAspect.#ctor(System.String,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="name">Name of the aspect.</param>
            <param name="targets">IList of aspect targets.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.GenericAspect.#ctor(System.String,Puzzle.NAspect.Framework.Aop.AspectTarget[],System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="name">Name of the aspect.</param>
            <param name="targets">Type[] array of aspect targets</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.InterfaceAspect">
            <summary>
            Aspect that matches target types based on interfaces implemented by the target.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.Type,System.Collections.IList,System.Collections.IList)">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceType">Type of the interface to match.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.Type,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceType">Type of the interface to match.</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.Type,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceType">Type of the interface to match</param>
            <param name="TargetMethodsignature">string Signature of methods to match.</param>
            <param name="Interceptor">Instance of an IInterceptor</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceTypeName">Full name of the type of the interface to match.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.String,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceTypeName">Full name of the type of the interface to match.</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterfaceAspect.#ctor(System.String,System.String,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Interface aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="interfaceTypeName">Full name of the type of the interface to match</param>
            <param name="TargetMethodsignature">string Signature of methods to match.</param>
            <param name="Interceptor">Instance of an IInterceptor</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.ITypedAspect">
            <summary>
            Marker interface for typed aspects.    
            </summary>
            <example>
            <code lang="CS">
            [AspectTarget(TargetSignature = "*")]
            [Mixin(typeof(MyMixin))]
            [Mixin(typeof(MyOtherMixin))]
            public class CacheAspect : ITypedAspect //marked iface only
            {
                [Interceptor(index = 1,TargetSignature="get_*")]
                public object CacheInterceptor (MethodInvocation call)
                {
                  ...
                }
            
                [Interceptor(index = 2,TargetSignature="get_*")]
                public void AfterInterceptor (AfterMethodInvocation call)
                {
                   ...
                }
            }
            </code>
            </example>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.InterceptorAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.AspectTargetAttribute"/>
            <seealso cref="T:Puzzle.NAspect.Framework.Aop.MixinAttribute"/>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.TypedToGenericConverter">
            <summary>
            Class that converts typed aspects into generic aspects.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.TypedToGenericConverter.Convert(Puzzle.NAspect.Framework.Aop.ITypedAspect)">
            <summary>
            Convert a typed aspect into a generic one.
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.InterceptorMethodSorter">
            <summary>
            Class that sorts interceptor methods based on index parameters
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.InterceptorMethodSorter.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.MayBreakFlowAttribute">
            <summary>
            This attribute can be applied to IInterceptors.
            It tells the debug visualizer that the interceptor may break the call flow.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.MayBreakFlowAttribute.#ctor">
            <summary>
            MayBreakFlowAttribute ctor.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.MayBreakFlowAttribute.#ctor(System.String)">
            <summary>
            MayBreakFlowAttribute ctor.
            </summary>
            <param name="reason">Reason why the interceptor may break the flow.</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.MayBreakFlowAttribute.Reason">
            <summary>
            Reason why the interceptor may break the flow.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.IsRequiredAttribute">
            <summary>
            This attribute can be applied to IInterceptors.
            It tells the engine that the interceptor may not be used after an interceptor that may break flow.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.IsRequiredAttribute.#ctor">
            <summary>
            IsRequiredAttribute ctor.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.IsRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            IsRequiredAttribute ctor.
            </summary>
            <param name="required">Set to true if the interceptor is required</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.IsRequiredAttribute.Required">
            <summary>
            Gets or sets the required property.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.ThrowsAttribute">
            <summary>
            This attribute can be applied to IInterceptors.
            It tells the debug visualizer that the interceptor may throw an exception.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.ThrowsAttribute.#ctor(System.Type)">
            <summary>
            ThrowsAttribute ctor.
            </summary>
            <param name="exceptionType">Type of the exception the interceptor may throw</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.ThrowsAttribute.ExceptionType">
            <summary>
            Type of exception the interceptor may throw.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.CatchesAttribute">
            <summary>
            This attribute can be applied to IInterceptors.
            It tells the debug visualizer that the interceptor may catch and consume an exception.
            Thus preventing the exception to bouble up in the call chain.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.CatchesAttribute.#ctor(System.Type)">
            <summary>
            CatchesAttribute ctor.
            </summary>
            <param name="exceptionType">The type of the exception that may be chaught</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.CatchesAttribute.ExceptionType">
            <summary>
            The type of the exception that may be chaught
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.ReplaceException">
            <summary>
            This attribute can be applied to IInterceptors.
            It tells the debug visualizer that the interceptor may catch and replace an excepton of one type with another
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.ReplaceException.#ctor(System.Type,System.Type)">
            <summary>
            ReplaceException ctor.
            </summary>
            <param name="catchType">Exception type to catch</param>
            <param name="throwType">Exception type to replace with</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.ReplaceException.CatchType">
            <summary>
            Exception type to catch
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Interception.ReplaceException.ThrowType">
            <summary>
            Exception type to replace with
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.AfterDelegate">
            <summary>
            Delegate that represents an "after" interceptor in a typed aspect.
            </summary>
            <param name="call">The method call</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.AroundDelegate">
            <summary>
            Delegate that represents an "around" interceptor in a typed aspect.
            </summary>
            <param name="call">The method call</param>
            <returns>The result of the interceptor</returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.BeforeDelegate">
            <summary>
            Delegate that represents an "before" interceptor in a typed aspect.
            </summary>
            <param name="call">The method call</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.IAfterInterceptor">
            <summary>
            Represents an "after" interceptor that is triggered after the base implementation of a method call is invoked.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.IInterceptor">
            <summary>
            Marker interface for all interceptor types
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.IAfterInterceptor.AfterCall(Puzzle.NAspect.Framework.AfterMethodInvocation)">
            <summary>
            Method that is triggered after the base implementation of a method call is invoked.
            </summary>
            <param name="call">The method call</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.IAroundInterceptor">
            <summary>
            Represents an "around" interceptor that may proceed or break a call.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.IAroundInterceptor.HandleCall(Puzzle.NAspect.Framework.MethodInvocation)">
            <summary>
            Intercepts a call.
            </summary>
            <param name="call"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.AspectMatcher">
            <summary>
            For internal use only.
            This class loops through all aspects and tries to match them for a given type.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AspectMatcher.#ctor">
            <summary>
            Aspect matcher ctor
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AspectMatcher.MatchAspectsForType(System.Type,System.Collections.IList)">
            <summary>
            Matches a list of IAspects for a given type
            </summary>
            <param name="type">The type to match</param>
            <param name="aspects">Untyped list of <c>IAspect</c></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.AttributeAspect">
            <summary>
            Aspect that matches target types based on attributes applied to the target.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.Type,System.Collections.IList,System.Collections.IList)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeType">Type of the attribute to match.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.Type,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeType">Type of the attribute to match.</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.Type,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeType">Type of the attribute to match</param>
            <param name="TargetMethodsignature">string Signature of methods to match.</param>
            <param name="Interceptor">Instance of an IInterceptor</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeTypeName">Full name of the type of the attribute to match.</param>
            <param name="mixins">IList of mixin types.</param>
            <param name="pointcuts">IList of IPointcut instances.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.String,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeTypeName">Full name of the type of the attribute to match.</param>
            <param name="mixins">Type[] array of mixin types</param>
            <param name="pointcuts">IPointcut[] array of pointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributeAspect.#ctor(System.String,System.String,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Attribute aspect Ctor.
            </summary>
            <param name="Name">Name of the aspect.</param>
            <param name="attributeTypeName">Full name of the type of the attribute to match</param>
            <param name="TargetMethodsignature">string Signature of methods to match.</param>
            <param name="Interceptor">Instance of an IInterceptor</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.SignatureAspect">
            <summary>
            Aspect that matches target types based on wildcard signatures.
            ? for ignoring single characters
            * for ignoring one or more characters
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect</param>
            <param name="targetName">Signature of the target type</param>
            <param name="mixins">Untyped list of <c>System.Type</c>s to mixin</param>
            <param name="pointcuts">Untyped list of IPointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.String,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect</param>
            <param name="targetName">Signature of the target type</param>
            <param name="mixins">Array of <c>System.Type</c>s to mixin</param>
            <param name="pointcuts">Array of IPointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.String,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect.</param>
            <param name="targetName">Signature of the target type.</param>
            <param name="TargetMethodsignature">Signature of the target methods.</param>
            <param name="Interceptor">Single <c>IInterceptor</c> that should intercept the matched methods.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.Type,System.Collections.IList,System.Collections.IList)">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect</param>
            <param name="targetType">Specific Type to which the aspect should be applied.</param>
            <param name="mixins">Untyped list of <c>System.Type</c>s to mixin</param>
            <param name="pointcuts">Untyped list of IPointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.Type,System.Type[],Puzzle.NAspect.Framework.Aop.IPointcut[])">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect</param>
            <param name="targetType">Specific Type to which the aspect should be applied.</param>
            <param name="mixins">Array of <c>System.Type</c>s to mixin</param>
            <param name="pointcuts">Array of IPointcut instances</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignatureAspect.#ctor(System.String,System.Type,System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            Signature aspect ctor.
            </summary>
            <param name="name">Name of the aspect</param>
            <param name="targetType">Specific Type to which the aspect should be applied.</param>
            <param name="targetMethodsignature">Signature of the target methods.</param>
            <param name="interceptor">Single <c>IInterceptor</c> that should intercept the matched methods.</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Interception.IBeforeInterceptor">
            <summary>
            Represents an "before" interceptor that is triggered before the base implementation of a method call is invoked.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Interception.IBeforeInterceptor.BeforeCall(Puzzle.NAspect.Framework.BeforeMethodInvocation)">
            <summary>
            Method that is triggered before the base implementation of a method call is invoked.
            </summary>
            <param name="call">The method call</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.IProxyAware">
            <summary>
            Interface used to make mixins aware of their owning proxy.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.IProxyAware.SetProxy(Puzzle.NAspect.Framework.IAopProxy)">
            <summary>
            Assigns the proxy to the mixin
            </summary>
            <param name="target">The proxy instance</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.AttributePointcut">
            <summary>
            Pointcut that matches attributes on target methods.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.PointcutBase">
            <summary>
            Base class for pointcuts
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.IPointcut">
            <summary>
            Interface implemented by all pointcuts.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.IPointcut.IsMatch(System.Reflection.MethodBase,System.Type)">
            <summary>
            Matches a method with the pointuct
            </summary>
            <param name="method">The method to match</param>
            <returns>True if the pointcut matched the method, otherwise false</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.IPointcut.Interceptors">
            <summary>
            Untyped list of <c>IInterceptor</c>s and <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c>
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutBase.IsMatch(System.Reflection.MethodBase,System.Type)">
            <summary>
            Matches a method with the pointuct
            </summary>
            <param name="method">The method to match</param>
            <returns>True if the pointcut matched the method, otherwise false</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Aop.PointcutBase.Interceptors">
            <summary>
            Untyped list of <c>IInterceptor</c>s and <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c>
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.Type,System.Collections.IList)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeType">Attribute type to match</param>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>s to apply on matched methods</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.Type,Puzzle.NAspect.Framework.Interception.IInterceptor[])">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeType">Attribute type to match</param>
            <param name="interceptors">Array of <c>IInterceptor</c>s to apply on matched methods</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.Type,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeType">Attribute type to match</param>
            <param name="interceptor"><c>IInterceptor</c> instance to appy on matched methods.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.Type,System.Delegate)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeType">Attribute type to match</param>
            <param name="interceptor">Interceptor delegate to apply on matched methods, valid delegates are <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c></param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.String,System.Collections.IList)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeTypeName">Name of the attribute type to match</param>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>s to apply on matched methods</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.String,Puzzle.NAspect.Framework.Interception.IInterceptor[])">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeTypeName">Name of the attribute type to match</param>
            <param name="interceptors">Array of <c>IInterceptor</c>s to apply on matched methods</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeTypeName">Name of the attribute type to match</param>
            <param name="interceptor"><c>IInterceptor</c> instance to appy on matched methods.</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.AttributePointcut.#ctor(System.String,System.Delegate)">
            <summary>
            AttributePointcut ctor.
            </summary>
            <param name="attributeTypeName">Name of the attribute type to match</param>
            <param name="interceptor">Interceptor delegate to apply on matched methods, valid delegates are <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c></param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Collections.IList)">
            <summary>
            SignaturePointcut ctor. 
            </summary>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>s to be applied to by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(Puzzle.NAspect.Framework.Interception.IInterceptor[])">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="interceptors">Array of <c>IInterceptors</c> to be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="interceptor">a single <c>IInterceptor</c> that should be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Delegate)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="interceptor">Interceptor delegate to apply on matched methods, valid delegates are <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c></param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            SignaturePointcut ctor. 
            </summary>
            <param name="targets">Untyped list of <c>PointcutTarget</c>s to be used by this pointcut</param>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>s to be applied to by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Collections.IList,Puzzle.NAspect.Framework.Interception.IInterceptor[])">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targets">Untyped list of <c>PointcutTarget</c>s to be used by this pointcut</param>
            <param name="interceptors">Array of <c>IInterceptors</c> to be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Collections.IList,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targets">Untyped list of <c>PointcutTarget</c>s to be used by this pointcut</param>
            <param name="interceptor">a single <c>IInterceptor</c> that should be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.Pointcut.#ctor(System.Collections.IList,System.Delegate)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targets">Untyped list of <c>PointcutTarget</c>s to be used by this pointcut</param>
            <param name="interceptor">Interceptor delegate to apply on matched methods, valid delegates are <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c></param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.PointcutMatcher">
            <summary>
            For internal use only.
            This class loops through all pointcuts in all aspects and tries to match them for a given method.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutMatcher.#ctor">
            <summary>
            PointcutMatcher ctor.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutMatcher.MethodShouldBeProxied(System.Reflection.MethodBase,System.Collections.IList)">
            <summary>
            Loops through all pointcuts in all aspects and tries to match them for a given method.
            </summary>
            <param name="method">The method to match</param>
            <param name="aspects">Untyped list of <c>IAspects</c></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.PointcutTarget">
            <summary>
            The target description for a pointcut
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutTarget.IsSignatureMatch(System.Reflection.MethodBase,System.Type)">
            <summary>
            Matches a method with the pointuct
            </summary>
            <param name="method">The method to match</param>
            <returns>True if the pointcut matched the method, otherwise false</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutTarget.IsFullSignatureMatch(System.Reflection.MethodBase,System.Type)">
            <summary>
            Matches a type plus method with the pointuct
            </summary>
            <param name="method">The method to match</param>
            <returns>True if the pointcut matched the type plus method, otherwise false</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.PointcutTarget.IsAttributeMatch(System.Reflection.MethodBase,System.Type)">
            <summary>
            Matches a method with the pointuct
            </summary>
            <param name="method">The method to match</param>
            <param name="type"></param>
            <returns>True if the pointcut matched the method, otherwise false</returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.SignaturePointcut">
            <summary>
            Pointcut that matches method signatures.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignaturePointcut.#ctor(System.String,System.Collections.IList)">
            <summary>
            SignaturePointcut ctor. 
            </summary>
            <param name="targetMethodSignature">Wildcard pattern of the method signatures to match</param>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>s to be applied to by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignaturePointcut.#ctor(System.String,Puzzle.NAspect.Framework.Interception.IInterceptor[])">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targetMethodSignature">Wildcard pattern of the method signatures to match</param>
            <param name="interceptors">Array of <c>IInterceptors</c> to be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignaturePointcut.#ctor(System.String,Puzzle.NAspect.Framework.Interception.IInterceptor)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targetMethodSignature">Wildcard pattern of the method signatures to match</param>
            <param name="interceptor">a single <c>IInterceptor</c> that should be applied by this pointcut</param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Aop.SignaturePointcut.#ctor(System.String,System.Delegate)">
            <summary>
            SignaturePointcut ctor.
            </summary>
            <param name="targetMethodSignature">Wildcard pattern of the method signatures to match</param>
            <param name="interceptor">Interceptor delegate to apply on matched methods, valid delegates are <c>BeforeDelegate</c>, <c>AroundDelegate</c> and <c>AfterDelegate</c></param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.FixedInterceptorAttribute">
            <summary>
            Decorate a method with this attribute to ensure that the interceptors you specify will always be applied regardless of the configuration file. If you decorate a class with this attribute, all methods in the class will be intercepted by the specified interceptors regardless of the configuration file.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.FixedMixinAttribute">
            <summary>
            Decorate a class with this attribute to ensure that the mixin or mixins you specify will always be applied to the class regardless of the configuration file.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.RequiresMixinAttribute">
            <summary>
            Decorate your interceptors with this attribute in order to indicate the types of mixins that are required for your interceptors to function properly.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Configuration.NAspectConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Configuration.NAspectConfigurationHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Configuration.NAspectConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ApplicationContext">
            <summary>
            Factory class that creates and configures an IEngine from app.config
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ApplicationContext.ConfigureFromSection(System.String)">
            <summary>
            
            </summary>
            <param name="sectionName">The name of the section to configure from</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ApplicationContext.Configure">
            <summary>
            Deserializes app.config and configures an IEngine.
            </summary>
            <returns>a default configured IEngine</returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ConfigurationCache">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ConfigurationCache.GetProxyLookup(System.String)">
            <summary>
            
            </summary>
            <param name="configurationName"></param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ConfigurationCache.GetWrapperLookup(System.String)">
            <summary>
            
            </summary>
            <param name="configurationName"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ConfigurationDeserializer">
            <summary>
            Class that deserializes engine configurations from xml
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ConfigurationDeserializer.Configure(System.Xml.XmlElement)">
            <summary>
            return a configured <c>IEngine</c> from an xml element.
            </summary>
            <param name="xmlRoot">xml node to deserialize</param>
            <returns>a configured <c>IEngine</c></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.EngineFactory">
            <summary>
            Factory that creates default AopEngine instances.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.EngineFactory.FromAppConfig">
            <summary>
            Create an AopEngine from app or web.config.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.EngineFactory.FromAppConfig(System.String)">
            <summary>
            Not yet implemented
            </summary>
            <param name="subSectionName">Name of a subsection in the config.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.EngineFactory.FromFile(System.String)">
            <summary>
            Not yet implemented
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.EngineFactory.FromFile(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="useTypePlaceHolders"></param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.EngineFactory.FromFile(System.String,System.String)">
            <summary>
            Not yet implemented
            </summary>
            <param name="fileName"></param>
            <param name="subSectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Engine">
            <summary>
            Default NAspect implementation of the aop engine.
            </summary>
            <example>
            <para>To create and use an NAspect engine:</para>
            <para>.NET 1.x :</para>
            <code lang="CS">
            Engine engine = Engine.Default;
            Car myCar = (Car)engine.CreateProxy(typeof(Car));
            </code>
            <para>.NET 2.0 :</para>
            <code lang="CS">
            Engine engine = Engine.Default;
            Car myCar = engine.CreateProxy&lt;Car&gt;();
            </code>
            </example>
        </member>
        <member name="T:Puzzle.NAspect.Framework.IEngine">
            <summary>
            Interface for Aop engines.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.AddStateToCtorParams(System.Object,System.Object[])">
            <summary>
            Util. method that inserts an object in the beginning of a parameter list
            </summary>
            <param name="state">State object to insert in parameter list. this object can be intercepted by ctor interceptors later on.</param>
            <param name="args">object array of boxed parameter values</param>
            <returns>A new array of parameters, including the state object</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateProxy(System.Type,System.Object[])">
            <summary>
            Creates a subclass proxy.
            This is primary used by .NET 1.x users or where you need to create proxies of dynamic types in .NET 2.0.        
            </summary>
            <param name="type">Type to proxify</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
            <example>
            <code lang="CS">
            Foo myFoo = (Foo)engine.CreateProxy(typeof(Foo));
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateProxyType(System.Type)">
            <summary>
            Creates a subclass proxy type
            </summary>
            <param name="type">Type to proxify</param>
            <returns>The proxy type</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateProxy``1(System.Object[])">
            <summary>
            Creates a subclass proxy of type <c>T</c>.
            </summary>
            <typeparam name="T">Type to proxify</typeparam>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateProxyWithState``1(System.Object,System.Object[])">
            <summary>
            Creates a subclass proxy of type <c>T</c>.
            </summary>
            <typeparam name="T">Type to proxify</typeparam>
            <param name="state">State object that should be used by ctor interceptors</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateProxyWithState(System.Object,System.Type,System.Object[])">
            <summary>
            Creates a subclass proxy.
            This is primary used by .NET 1.x users or where you need to create proxies of dynamic types in .NET 2.0.        
            </summary>
            <param name="state"></param>
            <param name="type">Type to proxify</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
            <example>
            <code lang="CS">
            Foo myFoo = (Foo)engine.CreateProxyWithState(typeof(Foo),"I can be used in an ctor interceptor");
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateWrapper(System.Object)">
            <summary>
            Creates a interface wrapper proxy
            </summary>
            <param name="instance">The instance to wrap</param>
            <returns>Proxy object which redirect calls to the real instance</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IEngine.CreateWrapperType(System.Type)">
            <summary>
            Creates an interface wrapper proxy type
            </summary>
            <param name="type">Type to proxify</param>
            <returns>The proxy type</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.IEngine.Configuration">
            <summary>
            The active engine configuration.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.IEngine.LogManager">
            <summary>
            Log manager.
            </summary>
            <example>
            <code lang="CS">
            aopEngine.LogManager.Loggers.Add(new ConsoleLogger());
            </code>
            </example>
        </member>
        <member name="F:Puzzle.NAspect.Framework.Engine.Default">
            <summary>
            Singleton engine instance configured from app.config.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.Engine.AspectMatcher">
            <summary>
            The aspect matcher to use when matching aspects.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.Engine.PointCutMatcher">
            <summary>
            The pointcut matcher to use when matching pointcuts.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.#ctor(System.String)">
            <summary>
            AOP Engine constructor
            </summary>
            <param name="configurationName">Name of configuration/type cache to use</param>
            <example >
            <para>You can create Engine instances when you want to be sure 
            they run with a totally unique configuration.
            This is very useful in unit testing scenarios.
            </para>
            <code lang="CS">
            
            Engine engine = new Engine("MyUniqueConfig");
            engine.Configuration.Aspects.Add(someAspect);
            
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateProxy(System.Type,System.Object[])">
            <summary>
            Creates a subclass proxy.
            This is primary used by .NET 1.x users or where you need to create proxies of dynamic types in .NET 2.0.
            </summary>
            <param name="type">Type to proxify</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
            <example>
            <code lang="CS">
            Foo myFoo = (Foo)engine.CreateProxy(typeof(Foo));
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateWrapper(System.Object)">
            <summary>
            Creates a interface wrapper proxy.
            This is useful when you want to create an AOP'ed Facade for an existing object.
            The wrapper will implement all of the interfaces implmented by the real instance and
            simply redirect every call from the wrapper to the real instance through its interceptors.
            </summary>
            <param name="instance">The instance to wrap</param>
            <returns>Proxy object which redirect calls to the real instance</returns>
            <example>
            <code lang="CS">
            IFoo myFoo = (IFoo)engine.CreateWrapper(someFooInstance);
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.AddStateToCtorParams(System.Object,System.Object[])">
            <summary>
            Util. method that inserts an object in the beginning of a parameter list
            </summary>
            <param name="state">State object to insert in parameter list. this object can be intercepted by ctor interceptors later on.</param>
            <param name="args">object array of boxed parameter values</param>
            <returns>A new array of parameters, including the state object</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateProxyWithState(System.Object,System.Type,System.Object[])">
            <summary>
            Creates a subclass proxy.
            This is primary used by .NET 1.x users or where you need to create proxies of dynamic types in .NET 2.0.
            </summary>
            <param name="state"></param>
            <param name="type">Type to proxify</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
            <example>
            <code lang="CS">
            Foo myFoo = (Foo)engine.CreateProxyWithState(typeof(Foo),"I can be used in an ctor interceptor");
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateProxyType(System.Type)">
            <summary>
            Creates a subclass proxy type
            </summary>
            <param name="type">Type to proxify</param>
            <returns>The proxy type</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateWrapperType(System.Type)">
            <summary>
            Creates an interface wrapper proxy type
            </summary>
            <param name="type">Type to proxify</param>
            <returns>The proxy type</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateProxy``1(System.Object[])">
            <summary>
            Creates a subclass proxy of type <c>T</c>.
            </summary>
            <typeparam name="T">Type to proxify</typeparam>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
            <example>
            <para>.NET 2.0 :</para>
            <code lang="CS">
            IEngine engine = Engine.Default;
            Car myCar = engine.CreateProxy&lt;Car&gt;();
            </code>
            </example>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Engine.CreateProxyWithState``1(System.Object,System.Object[])">
            <summary>
            Creates a subclass proxy of type <c>T</c>.
            </summary>
            <typeparam name="T">Type to proxify</typeparam>
            <param name="state">State object that should be used by ctor interceptors</param>
            <param name="args">Object array of boxed parameter values</param>
            <returns>The proxy instance</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Engine.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.Engine.LogManager">
            <summary>
            Log manager.
            </summary>
            <example>
            <code lang="CS">
            aopEngine.LogManager.Loggers.Add(new ConsoleLogger());
            </code>
            </example>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ProxyTypeInfo">
            <summary>
            This class tells the engine if a type have been proxied or extended.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ProxyTypeInfo.Type">
            <summary>
            The proxied type
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ProxyTypeInfo.IsProxied">
            <summary>
            Is the type proxied?
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ProxyTypeInfo.IsExtended">
            <summary>
            IS the type extended?
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ConfigurationElements.EngineConfiguration">
            <summary>
            Configutration class that holds a set of aspects
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.ConfigurationElements.EngineConfiguration.#ctor">
            <summary>
            EngineConfiguration ctor.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.ConfigurationElements.EngineConfiguration.TypeExtenders">
            <summary>
            Untyped list of <c>ITypeExtender</c>s
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.ConfigurationElements.EngineConfiguration.Aspects">
            <summary>
            Untyped list of <c>IAspect</c>s
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.ConfigurationElements.EngineConfiguration.Name">
            <summary>
            Name of this configuration.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Aop.PointcutTargetType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.ExtendedMember.Name">
            <summary>
            Property Name (string)
            </summary>        
        </member>
        <member name="P:Puzzle.NAspect.Framework.ExtendedProperty.FieldName">
            <summary>
            Property FieldName (string)
            </summary>        
        </member>
        <member name="P:Puzzle.NAspect.Framework.ExtendedProperty.Type">
            <summary>
            Property Type (Type)
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.AfterMethodInvocation">
            <summary>
            Representation of an "after" method call.
            Meaning this will fire after the base implementation is invoked.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.AfterMethodInvocation.#ctor(Puzzle.NAspect.Framework.MethodInvocation)">
            <summary>
            AfterMethodInvocation ctor.
            Meaning this will fire after the base implementation is invoked.
            </summary>
            <param name="invocation">MethodInvocation that should be wrapped</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.Parameters">
            <summary>
            Untyped list of InterceptedParameter instances.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.Method">
            <summary>
            The intercepted method. (in the dynamic proxy)
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.Target">
            <summary>
            The object on which the method was invoked.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.ReturnType">
            <summary>
            The return type of the method (if available, ctors do not have a return type).
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.Signature">
            <summary>
            Returns the absolute signature of the call.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.AfterMethodInvocation.ValueSignature">
            <summary>
            Returns the value signature of the call.
            parameter values are represented with ".ToString()"
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.AopProxyMixin">
            <summary>
            Implementation of IAopProxy that is mixed into every subclass and interface proxy.    
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.IAopProxy">
            <summary>
            Interface implemented by all subclass and interface proxies.
            <seealso cref="T:Puzzle.NAspect.Framework.AopProxyMixin"/>
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.IAopProxy.HandleFastCall(Puzzle.NAspect.Framework.IAopProxy,System.Object,System.Int32,System.Object[],System.Type)">
            <summary>
            This is one of the key methods of the entire interception process.
            This method handles calls from the proxy and redirects them to the interceptors.
            </summary>
            <param name="target">The proxy instance on which the call was invoked</param>
            <param name="methodId">Unique identifier of the method</param>
            <param name="returnType">The return type of the invoked method</param>
            <returns>The result of the call chain</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.AopProxyMixin.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.AopProxyMixin.SetProxy(Puzzle.NAspect.Framework.IAopProxy)">
            <summary>
            Assigns a proxy instance to the mixin.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.AopProxyMixin.HandleFastCall(Puzzle.NAspect.Framework.IAopProxy,System.Object,System.Int32,System.Object[],System.Type)">
            <summary>
            This is one of the key methods of the entire interception process.
            This method handles calls from the proxy and redirects them to the interceptors.
            </summary>
            <param name="target">The proxy instance on which the call was invoked</param>
            <param name="methodIndex">Unique index of the method</param>
            <param name="returnType">The return type of the invoked method</param>
            <returns>The result of the call chain</returns>
        </member>
        <member name="M:Puzzle.NAspect.Framework.AopProxyMixin.GetTypeDefaultValue(System.Type)">
            <summary>
            .NET 1.x hack to get the default value of a type.
            This is currently not used.
            It was used in a very old version of NAspect where you could proxy abstract types and force them to return a default value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.BeforeMethodInvocation">
            <summary>
            Representation of a "before" method call.
            Meaning this will fire before the base implementation is invoked.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.BeforeMethodInvocation.#ctor(Puzzle.NAspect.Framework.MethodInvocation)">
            <summary>
            BeforeMethodInvocation ctor.
            </summary>
            <param name="invocation">MethodInvocation that should be wrapped</param>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.Parameters">
            <summary>
            Untyped list of InterceptedParameter instances.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.Method">
            <summary>
            The intercepted method. (in the dynamic proxy)
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.Target">
            <summary>
            The object on which the method was invoked.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.ReturnType">
            <summary>
            The return type of the method (if available, ctors do not have a return type).
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.Signature">
            <summary>
            Returns the absolute signature of the call.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.BeforeMethodInvocation.ValueSignature">
            <summary>
            Returns the value signature of the call.
            parameter values are represented with ".ToString()"
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.InterfaceProxyBase">
            <summary>
            Base class for interface proxies.
            Used incase we make something up that we need to do with interface proxies.
            This is really anti YAGNI..
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.ParameterType">
            <summary>
            Enum for parameter directions
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ParameterType.ByVal">
            <summary>
            ByValue parameter
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ParameterType.Ref">
            <summary>
            ByReference parameter
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.ParameterType.Out">
            <summary>
            Output parameter
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.InvocationParameterInfo.Name">
            <summary>
            Name of the parameter.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.InvocationParameterInfo.Index">
            <summary>
            Index of the parameter in the method signature.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.InvocationParameterInfo.Type">
            <summary>
            Data type of the parameter.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.InvocationParameterInfo.ParameterType">
            <summary>
            Direction of the parameter.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.InvocationParameterInfo.#ctor(System.String,System.Int32,System.Type,Puzzle.NAspect.Framework.ParameterType)">
            <summary>
            Ctor for an intercepted parameter
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="index">Index of the parameter in the method signature</param>
            <param name="type">Data type of the parameter.</param>
            <param name="parameterType">Direction of the parameter.</param>
        </member>
        <member name="T:Puzzle.NAspect.Framework.MethodCache">
            <summary>
            Cache used by the emitter to store various lookup values.
            There is actually not a single person alive that knows exactly what these lists hold.
            It has been long forgotten by the ancients.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.mixinsLookup">
            <summary>
            Contains an arraylist of affected mixins for a proxytype
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.aspectsLookup">
            <summary>
            Contains an arraylist of affected aspects for a proxytype
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.methodsLookup">
            <summary>
            Contains an arraylist of affected methods for a proxytype
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.methodLookup">
            <summary>
            Contains the base methodinfo for each methodid (wrappername)
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.wrapperMethodLookup">
            <summary>
            Contains the wrapper methodinfo for each methodid(wrappername)
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.methodInterceptorsLookup">
            <summary>
            Contains an arraylist of interceptors for each methodId (wrappername)
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.MethodCache.GetInterceptors(System.String)">
            <summary>
            Gets the interceptors associated with a unique methodId
            </summary>
            <param name="methodId">unique methodId generated by the proxy emitter.</param>
            <returns>List of IInterceptors and BeforeDelegate , AroundDelegate and AfterDelegates</returns>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodCache.GetMethodMethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.MethodCache.GetMethod(System.String)">
            <summary>
            
            </summary>
            <param name="methodId"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.MethodInvocation">
            <summary>
            Representation of a method call.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.Target">
            <summary>
            The object on which the method was invoked.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.ExecutionTarget">
            <summary>
            The object on which the method was invoked.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.Method">
            <summary>
            The intercepted method. (in the dynamic proxy)
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.Parameters">
            <summary>
            Untyped list of <c>InterceptedParameters</c>.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.RawParameters">
            <summary>
            Object array of the raw parameter values.
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.ReturnType">
            <summary>
            The return type of the method (if available, ctors do not have a return type).
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.EndMethod">
            <summary>
            The intercepted methods base implementation. (in the base type)
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.Interceptors">
            <summary>
            Untyped list of <c>IInterceptor</c>'s or <c>BeforeDelegate</c>, <c>AroundDelegate</c> or <c>AfterDelegate</c>
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Framework.MethodInvocation.Step">
            <summary>
            current interception chain step. (current interceptor index)
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.MethodInvocation.#ctor(Puzzle.NAspect.Framework.IAopProxy,System.Object,System.Reflection.MethodBase,System.Reflection.MethodBase,Puzzle.NAspect.Framework.InterceptedParameter[],System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Ctor for MethodInvocation
            </summary>
            <param name="target">The object on which the method was invoked.</param>
            <param name="method">The intercepted method. (in the dynamic proxy)</param>
            <param name="endMethod">The intercepted methods base implementation. (in the base type)</param>
            <param name="parameters">Untyped list of <c>InterceptedParameters</c>.</param>
            <param name="returnType">The return type of the method (if available, ctors do not have a return type).</param>
            <param name="interceptors">Untyped list of <c>IInterceptor</c>'s or <c>BeforeDelegate</c>, <c>AroundDelegate</c> or <c>AfterDelegate</c></param>
        </member>
        <member name="M:Puzzle.NAspect.Framework.MethodInvocation.Proceed">
            <summary>
            Executes the next step of the interception chain.
            </summary>
            <returns>The result of the next interceptor or base implementation</returns>
        </member>
        <member name="P:Puzzle.NAspect.Framework.MethodInvocation.Signature">
            <summary>
            Returns the absolute signature of the call.
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Framework.MethodInvocation.ValueSignature">
            <summary>
            Returns the value signature of the call.
            parameter values are represented with ".ToString()"
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.InterceptedParameter">
            <summary>
            Representation of an intercepted call parameter.
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.InterfaceProxyFactory">
            <summary>
            Factory that produces interface proxy types
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.InterfaceProxyFactory.CreateProxyType(System.Type,System.Collections.IList,System.Collections.IList,Puzzle.NAspect.Framework.Engine)">
            <summary>
            Creates a proxy type of a given type.
            </summary>
            <param name="baseType">Type to proxyfy</param>
            <param name="aspects">Untyped list of <c>IAspects</c> to apply to the proxy.</param>
            <param name="mixins">Untyped list of <c>System.Type</c>s that will be mixed in.</param>
            <param name="engine">The AopEngine requesting the proxy type</param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.SubclassProxyFactory">
            <summary>
            Factory that produces subclass proxy types.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.SubclassProxyFactory.CreateProxyType(System.Type,System.Collections.IList,System.Collections.IList,Puzzle.NAspect.Framework.Engine)">
            <summary>
            Creates a proxy type of a given type.
            </summary>
            <param name="baseType">Type to proxyfy</param>
            <param name="aspects">Untyped list of <c>IAspects</c> to apply to the proxy.</param>
            <param name="mixins">Untyped list of <c>System.Type</c>s that will be mixed in.</param>
            <param name="engine">The AopEngine requesting the proxy type</param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Utils.AopTools">
            <summary>
            Util class.
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Utils.AopTools.GetMethodSignature(System.Reflection.MethodBase)">
            <summary>
            Returns the signature for a method,property or ctor.
            </summary>
            <param name="method">a method,property or ctor</param>
            <returns>string based representation of the method signature</returns>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizAspect">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizAspect.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizAspect.Mixins">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizAspect.Pointcuts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizConstructor">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.GetProxyText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.GetRealText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.GetCallSample">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.GetParamTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.Interceptors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethodBase.OwnerType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizConstructor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizConstructor.GetCallSample">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizConstructor.GetProxyText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizConstructor.GetRealText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptorType">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptorType.Before">
            <summary>
            
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptorType.After">
            <summary>
            
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptorType.Around">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.InterceptorType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.MayBreakFlow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizInterceptor.ThrowsExceptionTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.GetProxyText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.GetRealText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.GetCallSample">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.ReturnType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMethod.Mixin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizMixin">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMixin.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizMixin.FullTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizParameterDirection">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizParameterDirection.Val">
            <summary>
            ByVal type of parameter
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizParameterDirection.Ref">
            <summary>
            ByRef type of parameter
            </summary>
        </member>
        <member name="F:Puzzle.NAspect.Debug.Serialization.Elements.VizParameterDirection.Out">
            <summary>
            Output parameter
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizParameter">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizParameter.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizParameter.ParameterTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizParameter.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizPointcut">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizPointcut.Interceptors">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.Elements.VizType">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.BaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.Methods">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.Mixins">
            <summary>
            
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.Elements.VizType.Aspects">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.ISerializableProxy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Debug.Serialization.ISerializableProxy.GetSerializedProxy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NAspect.Debug.Serialization.SerializedProxy">
            <summary>
            DTO for the VS.NET 2005 debugger visualiser
            </summary>
        </member>
        <member name="P:Puzzle.NAspect.Debug.Serialization.SerializedProxy.ProxyType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Puzzle.NAspect.Framework.Tools.Text">
            <summary>
            Util class for strings
            </summary>
        </member>
        <member name="M:Puzzle.NAspect.Framework.Tools.Text.IsMatch(System.String,System.String)">
            <summary>
            Matches wildcard patterns in strings.
            </summary>
            <param name="text">string to match.</param>
            <param name="pattern">matching pattern.</param>
            <returns>true if match, otherwise false.</returns>
        </member>
    </members>
</doc>
